#include <stdio.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum) {
    int rem_bt[n];
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];

    int t = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                if (rem_bt[i] > quantum) {
                    rem_bt[i] -= quantum;
                    t += quantum;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

void findAvgTime(int processes[], int n, int bt[], int quantum) {
    int wt[n], tat[n];
    findWaitingTime(processes, n, bt, wt, quantum);
    findTurnAroundTime(processes, n, bt, wt, tat);
    
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("Process  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++)
        printf("%d\t\t\t%d\t\t\t%d\t\t\t  %d\n", processes[i], bt[i], wt[i], tat[i]);
    
    printf("Average Waiting Time: %.2f ms\n", total_wt / n);
    printf("Average Turnaround Time: %.2f ms\n", total_tat / n);
}

int main() {
    int processes[] = {1, 2, 3};
    int burst_time[] = {24, 3, 3};
    int n = sizeof(processes) / sizeof(processes[0]);
    int quantum = 4;

    findAvgTime(processes, n, burst_time, quantum);

    return 0;
}

INPUT: from the program

OUTPUT: 
Process     Burst Time      Waiting Time    Turnaround Time
1            24               6               30
2            3                4               7
3            3                7               10
Average Waiting Time: 5.67 ms
Average Turnaround Time: 15.67ms
