#include <stdio.h>

void optimal(int pages[], int n, int capacity) {
    int frames[capacity], count = 0;

    for (int i = 0; i < capacity; i++)
        frames[i] = -1;

    printf("Page Reference | Frames\n");

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int replace = 0, farthest = i + 1;
            for (int j = 0; j < capacity; j++) {
                int k;
                for (k = i + 1; k < n; k++)
                    if (frames[j] == pages[k])
                        break;
                if (k > farthest) {
                    farthest = k;
                    replace = j;
                }
            }
            frames[replace] = pages[i];
            count++;
        }
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < capacity; j++)
            printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", count);
}

int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;
    
    optimal(pages, n, capacity);
    return 0;
}
I/O:
Enter the number of frames: 3
Enter the number of pages: 10
Enter the page reference string: 7 0 1 2 0 3 4 2 3 0

Step   Page    Frames
1      7      [ 7 - - ]
2      0      [ 7 0 - ]
3      1      [ 7 0 1 ]
4      2      [ 2 0 1 ] (Page Replacement: 7 -> 2)
5      0      [ 2 0 1 ] (No Change)
6      3      [ 3 0 1 ] (Page Replacement: 2 -> 3)
7      4      [ 3 4 1 ] (Page Replacement: 0 -> 4)
8      2      [ 2 4 1 ] (Page Replacement: 3 -> 2)
9      3      [ 2 3 1 ] (Page Replacement: 4 -> 3)
10     0      [ 0 3 1 ] (Page Replacement: 2 -> 0)
Total Page Faults: 7

